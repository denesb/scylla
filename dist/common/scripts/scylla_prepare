#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright 2018 ScyllaDB
#

#
# This file is part of Scylla.
#
# See the LICENSE.PROPRIETARY file in the top-level directory for licensing information.

import os
import sys
import glob
import platform

from scylla_util import *

def verify_cpu():
    if platform.machine() == 'x86_64':
        needed_flags = set(['sse4_2', 'pclmulqdq'])
        for line in open('/proc/cpuinfo'):
            if line.startswith('flags'):
                flags = set(line.split()[2:])
                if not needed_flags <= flags:
                    print('Scylla requires the sse4.2 and clmul instruction sets, check your processor and hypervisor')
                    sys.exit(1)

if __name__ == '__main__':
    verify_cpu()

    if os.getuid() > 0:
        print('Requires root permission.')
        sys.exit(1)
    if is_redhat_variant():
        cfg = sysconfig_parser('/etc/sysconfig/scylla-server')
    else:
        cfg = sysconfig_parser('/etc/default/scylla-server')
    ami = cfg.get('AMI')
    mode = cfg.get('NETWORK_MODE')

    if ami == 'yes' and os.path.exists('/etc/scylla/ami_disabled'):
        os.remove('/etc/scylla/ami_disabled')
        sys.exit(1)

    if mode == 'virtio':
        tap = cfg.get('TAP')
        user = cfg.get('USER')
        group = cfg.get('GROUP')
        bridge = cfg.get('BRIDGE')
        run('ip tuntap del mode tap dev {TAP}'.format(TAP=tap))
        run('ip tuntap add mode tap dev {TAP} user {USER} one_queue vnet_hdr'.format(TAP=tap, USER=user))
        run('ip link set dev {TAP} up'.format(TAP=tap))
        run('ip link set dev {TAP} master {BRIDGE}'.format(TAP=tap, BRIDGE=bridge))
        run('chown {USER}.{GROUP} /dev/vhost-net'.format(USER=user, GROUP=group))
    elif mode == 'dpdk':
        ethpciid = cfg.get('ETHPCIID')
        nr_hugepages = cfg.get('NR_HUGEPAGES')
        run('modprobe uio')
        run('modprobe uio_pci_generic')
        run('/opt/scylladb/scripts/dpdk-devbind.py --force --bind=uio_pci_generic {ETHPCIID}'.format(ETHPCIID=ethpciid))
        for n in glob.glob('/sys/devices/system/node/node?'):
            with open('{n}/hugepages/hugepages-2048kB/nr_hugepages'.format(n=n), 'w') as f:
                f.write(nr_hugepages)
        if dist_name() == 'Ubuntu':
            run('hugeadm --create-mounts')
    else:
        if create_perftune_conf(cfg):
            run("{} --options-file /etc/scylla.d/perftune.yaml".format(perftune_base_command()))
